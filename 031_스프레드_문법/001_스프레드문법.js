// 001 스프레드 문법

/*
    - ES6 에서 도입됨
    - 스프레드 문법(전개 문법)  ... 은 하나로 뭉쳐 있는 여러 값들의 집합을 펼쳐서(전개, 분산하여, spreade) 개별적인 값들의 목록으로 만든다.
    - 스프레드 문법을 사용할 수 있는 대상은 Array, String, Map, Set, Dom 컬렉션(NodeList, HTMLCollection), arguments
    와 같이 for...of  문으로 순회할 수 있는 이터러블에 한정된다.
 */

console.log(...[1, 2, 3]); // 1 2 3

// 문자열은 이터러블이다.
console.log(...'Hello'); // H e l l o

// Map과 Set은 이터러블이다.
console.log(...new Map([['a', '1'], ['b', '2']])); // [ 'a', '1' ] [ 'b', '2' ]
console.log(...new Set([1, 2, 3])); // 1 2 3

//이터러블이 아닌 일반 객체는 스프레드 문법의 대상이 될 수 없다.
// console.log(...{ a: 1, b: 2 }); // TypeError: Found non-callable @@iterator

/*
    - 위 예제에서 ...[1, 2, 3] 은 이터러블인 배열을 펼쳐서 요소들을 개별적인 값들의 목록 1 2 3으로 만든다.
    이 때 1 2 3은 값이 아니라 값들의 목록이다. 즉, 스프레드 문법의 결과는 값이 아니다.
    - 이는 스프레드 문법이 피연산자를 연산하여 값을 생성하는 연산자가 아님을 의미한다.
    - 따라서 스프레드 문법의 결과는 변수에 할당할 수 없다.
 */
//const list = ...[1, 2, 3]; //SyntaxError
/*
    이처럼 스프레드 문법의 결과 물은 값으로 사용할 수 없고, 다음과 같이 쉼표로 구분한 값의 목록을 사용하는 문맥에서만 사용할 수 있다.
    - 함수 호출문의 인수 목록
    - 배열 리터럴의 요소 목록
    - 객체 리터럴의 프로퍼티 목록
 */


