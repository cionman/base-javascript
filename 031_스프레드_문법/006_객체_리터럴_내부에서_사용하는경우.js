// 006 객체 리터럴 내부에서 사용하는 경우
/*
    -  Rest프로퍼티와 함께 2020년 7월 stage4에 제안되어 있는 스프레드 프로퍼티를 사용하면
    객체 리터럴의 프로퍼티 목록에서도 스프레드 문법을 사용할 수 있다.
    - 스프레드 문법 대상은 이터러블이어야하지만 스프레드 프로퍼티 제안은 일반 객체를 대상으로 스프레드 문법의 사용을 허용한다.
 */

const obj = { x: 1, y: 2 };
const copy = { ...obj };

console.log(copy);
console.log(obj === copy); //false

// 객체 병합
const merged = { x: 1, y: 2, ...{ a: 3, b: 4 } };
console.log(merged); // { x: 1, y: 2, a: 3, b: 4 }

// 스프레드 프로퍼티가 제안 되기 이전 ES6에서 도입된 Object.assign메서드를 사용하여 여러개의 객체를 병합하거나 특정 프로퍼티를 변경 또는 추가했다.

// 객체 병합, 프로퍼티가 중복되는 경우 뒤에 위치한 프로퍼티가 우선권을 갖는다.
console.log(Object.assign({}, { x: 1, y: 2 }, { y: 10, z: 3 })); // { x: 1, y: 10, z: 3 }

//특정 프로퍼티 변경
console.log(Object.assign({}, { x: 3, y: 5 }, { y: 100 })); // { x: 3, y: 100 }

//프로퍼티 추가
console.log(Object.assign({}, { x: 3, y: 5 }, { z: 100 })); // { x: 3, y: 5, z: 100 }


// 스프레드 프로퍼티는 Object.assign을 대체할 수 있는 간편한 문법이다.
// 객체 병합, 프로퍼티가 중복되는 경우 뒤에 위치한 프로퍼티가 우선권을 갖는다.
console.log({ ...{ x: 1, y: 2 }, ...{ y: 10, z: 3 } }); // { x: 1, y: 10, z: 3 }

//특정 프로퍼티 변경
console.log({ ...{ x: 3, y: 5 }, ...{ y: 100 } }); // { x: 3, y: 100 }

//프로퍼티 추가
console.log({ ...{ x: 3, y: 5 }, ...{ z: 100 } }); // { x: 3, y: 5, z: 100 }

